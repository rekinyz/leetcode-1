'use strict';

const assert = require('assert');
const _ = require('lodash');
const { cheapestJump } = require('./');

describe('#cheapestJump', () => {
  const tests = [
    {
      A: [1, 2, 4, -1, 2],
      B: 2,
      result: [1, 3, 5],
    },
    {
      A: [1, 2, 4, 2, 2],
      B: 2,
      result: [1, 2, 4, 5],
    },
    {
      A: [1, 2, 4, -1, 2],
      B: 1,
      result: [],
    },
    {
      A: [0, 0, 0, 0, 0, 0],
      B: 3,
      result: [1, 2, 3, 4, 5, 6],
    },
    {
      A: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      B: 5,
      result: [1, 5, 10],
    },
    {
      A: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
      B: 7,
      result: [1, 6, 13, 20],
    },
    {
      A: [
        33,
        90,
        57,
        39,
        42,
        45,
        29,
        90,
        81,
        87,
        88,
        37,
        58,
        97,
        80,
        2,
        77,
        64,
        82,
        41,
        2,
        33,
        34,
        95,
        85,
        77,
        92,
        3,
        8,
        15,
        71,
        84,
        58,
        65,
        46,
        48,
        3,
        74,
        4,
        83,
        23,
        12,
        15,
        77,
        33,
        65,
        17,
        86,
        21,
        62,
        71,
        55,
        80,
        63,
        75,
        55,
        11,
        34,
        -1,
        64,
        81,
        18,
        77,
        82,
        8,
        12,
        14,
        6,
        46,
        39,
        71,
        14,
        6,
        46,
        89,
        37,
        88,
        70,
        88,
        33,
        89,
        92,
        60,
        0,
        78,
        10,
        88,
        99,
        20,
      ],
      B: 74,
      result: [1, 16, 84, 89],
    },
    {
      A: _.times(100),
      B: 10,
      result: [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
    },
    {
      A: [
        15,
        -1,
        32,
        53,
        93,
        48,
        48,
        52,
        31,
        94,
        83,
        37,
        68,
        83,
        73,
        28,
        9,
        45,
        95,
        34,
        49,
        1,
        31,
        80,
        44,
        88,
        47,
        78,
        78,
        -1,
        17,
        84,
        46,
        22,
        47,
        50,
        69,
        54,
        95,
        14,
        63,
        1,
        54,
        87,
        89,
        3,
        13,
        31,
        18,
        13,
        29,
        3,
        88,
        21,
        59,
        96,
        19,
        93,
        10,
        61,
        44,
        74,
        51,
        66,
        3,
        95,
        75,
        29,
        27,
        19,
        3,
        45,
        56,
        4,
        97,
        60,
        12,
        77,
        26,
        71,
        73,
        50,
        20,
        12,
        43,
        83,
        41,
      ],
      B: 43,
      result: [1, 22, 46, 87],
    },
  ];

  _.forEach(tests, ({ A, B, result }) => {
    it(`[${A}], ${B} -> [${result}]`, () => {
      assert.deepEqual(cheapestJump(A, B), result);
    });
  });
});
